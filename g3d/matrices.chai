// -- written by groverbuger for g3d
// -- september 2021
// -- MIT license

auto vectors = require("g3d/vectors.chai")

// ----------------------------------------------------------------------------------------------------
// -- matrix class
// ----------------------------------------------------------------------------------------------------
// -- matrices are 16 numbers in table, representing a 4x4 matrix like so:
// --
// -- |  1   2   3   4  |
// -- |                 |
// -- |  5   6   7   8  |
// -- |                 |
// -- |  9   10  11  12 |
// -- |                 |
// -- |  13  14  15  16 |

class matrix {
    def matrix() {
        // -- initialize a matrix as the identity matrix
        this.matrix = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]
    }
    // -- automatically converts a matrix to a string
    // -- for printing to console and debugging
    // def __tostring() {
    //     return ("%f\t%f\t%f\t%f\n%f\t%f\t%f\t%f\n%f\t%f\t%f\t%f\n%f\t%f\t%f\t%f"):format(unpack(this.matrix))
    // }

    // ----------------------------------------------------------------------------------------------------
    // -- transformation, projection, and rotation matrices
    // ----------------------------------------------------------------------------------------------------
    // -- the three most important matrices for 3d graphics
    // -- these three matrices are all you need to write a simple 3d shader

    // -- returns a transformation matrix
    // -- translation, rotation, and scale are all 3d vectors
    def setTransformationMatrix(translation, rotation, scale) {
        // -- translations
        this.matrix[3]  = translation[0]
        this.matrix[7]  = translation[1]
        this.matrix[11] = translation[2]

        // -- rotations
        if (rotation.size() == 3) {
            // -- use 3D rotation vector as euler angles
            // -- source: https://en.wikipedia.org/wiki/Rotation_matrix
            auto ca = math.cos(rotation[2])
            auto cb = math.cos(rotation[1])
            auto cc = math.cos(rotation[0])
            auto sa = math.sin(rotation[2])
            auto sb = math.sin(rotation[1])
            auto sc = math.sin(rotation[0])
            this.matrix = [
                ca*cb,
                ca*sb*sc - sa*cc,
                ca*sb*cc + sa*sc,
                this.matrix[3],
                sa*cb,
                sa*sb*sc + ca*cc,
                sa*sb*cc - ca*sc,
                this.matrix[7],
                -sb,
                cb*sc,
                cb*cc,
                this.matrix[11],
                this.matrix[12],
                this.matrix[13],
                this.matrix[14],
                this.matrix[15]
            ]
        } else {
            // -- use 4D rotation vector as a quaternion
            auto qx = rotation[0]
            auto qy = rotation[1]
            auto qz = rotation[2]
            auto qw = rotation[3]
            this.matrix = [
                1 - 2*qy^2 - 2*qz^2,
                2*qx*qy - 2*qz*qw,
                2*qx*qz + 2*qy*qw,
                this.matrix[3],
                2*qx*qy + 2*qz*qw,
                1 - 2*qx^2 - 2*qz^2,
                2*qy*qz - 2*qx*qw,
                this.matrix[7],
                2*qx*qz - 2*qy*qw,
                2*qy*qz + 2*qx*qw,
                1 - 2*qx^2 - 2*qy^2,
                this.matrix[11],
                this.matrix[12],
                this.matrix[13],
                this.matrix[14],
                this.matrix[15]
            ]
        }

        // -- scale
        auto sx = scale[0]
        auto sy = scale[1]
        auto sz = scale[2]
        this.matrix = [
            this.matrix[0] * sx,
            this.matrix[1] * sy,
            this.matrix[2] * sz,
            this.matrix[3],
            this.matrix[4] * sx,
            this.matrix[5] * sy,
            this.matrix[6] * sz,
            this.matrix[7],
            this.matrix[8] * sx,
            this.matrix[9] * sy,
            this.matrix[10] * sz,
            this.matrix[11],
            0,
            0,
            0,
            1
        ]
        // -- fourth row is not used, just set it to the fourth row of the identity matrix
    }

    // -- returns a perspective projection matrix
    // -- (things farther away appear smaller)
    // -- all arguments are scalars aka normal numbers
    // -- aspectRatio is defined as window width divided by window height
    def setProjectionMatrix(fov, near, far, aspectRatio) {
        auto top = near * math.tan(fov/2)
        auto bottom = -1*top
        auto right = top * aspectRatio
        auto left = -1*right

        this.matrix = [
            2*near/(right-left), 0, (right+left)/(right-left), 0,
            0, 2*near/(top-bottom), (top+bottom)/(top-bottom), 0,
            0, 0, -1*(far+near)/(far-near), -2*far*near/(far-near),
            0, 0, -1, 0
        ]
    }

    // -- returns an orthographic projection matrix
    // -- (things farther away are the same size as things closer)
    // -- all arguments are scalars aka normal numbers
    // -- aspectRatio is defined as window width divided by window height
    def setOrthographicMatrix(fov, size, near, far, aspectRatio) {
        auto top = size * math.tan(fov/2)
        auto bottom = -1*top
        auto right = top * aspectRatio
        auto left = -1*right

        this.matrix = [
            2/(right-left), 0, 0, -1*(right+left)/(right-left),
            0, 2/(top-bottom), 0, -1*(top+bottom)/(top-bottom),
            0, 0, -2/(far-near), -(far+near)/(far-near),
            0, 0, 0, 1
        ]
    }

    // -- returns a view matrix
    // -- eye, target, and up are all 3d vectors
    def setViewMatrix(eye, target, up) {
        auto z = vectors.normalize(eye[0] - target[0], eye[1] - target[1], eye[2] - target[2])
        auto x = vectors.normalize(vectors.crossProduct(up[0], up[1], up[2], z[0], z[1], z[2]))
        auto y = vectors.crossProduct(z[0], z[1], z[2], x[0], x[1], x[2])

        this.matrix = [
            x[0], x[1], x[2], -1*vectors.dotProduct(x[0], x[1], x[2], eye[0], eye[1], eye[2]),
            y[0], y[1], y[2], -1*vectors.dotProduct(y[0], y[1], y[2], eye[0], eye[1], eye[2]),
            z[0], z[1], z[2], -1*vectors.dotProduct(z[0], z[1], z[2], eye[0], eye[1], eye[2]),
            0, 0, 0, 1
        ]
    }
}
