// -- written by groverbuger for g3d
// -- september 2021
// -- MIT license

// auto vectors = require("g3d/vectors.chai")

// ----------------------------------------------------------------------------------------------------
// -- matrix class
// ----------------------------------------------------------------------------------------------------
// -- matrices are 16 numbers in table, representing a 4x4 matrix like so:
// --
// -- |  1   2   3   4  |
// -- |                 |
// -- |  5   6   7   8  |
// -- |                 |
// -- |  9   10  11  12 |
// -- |                 |
// -- |  13  14  15  16 |

class matrix {
    def matrix() {
        // -- initialize a matrix as the identity matrix
        this.matrix = [1.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f,1.0f]
    }
    // -- automatically converts a matrix to a string
    // -- for printing to console and debugging
    // def __tostring() {
    //     return ("%f\t%f\t%f\t%f\n%f\t%f\t%f\t%f\n%f\t%f\t%f\t%f\n%f\t%f\t%f\t%f"):format(unpack(this.matrix))
    // }

    // ----------------------------------------------------------------------------------------------------
    // -- transformation, projection, and rotation matrices
    // ----------------------------------------------------------------------------------------------------
    // -- the three most important matrices for 3d graphics
    // -- these three matrices are all you need to write a simple 3d shader

    // -- returns a transformation matrix
    // -- translation, rotation, and scale are all 3d vectors
    def setTransformationMatrix(translation, rotation, scale) {
       this.matrix = love.chai_matrices.setTransformationMatrix(translation, rotation, scale, [1.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f,1.0f])
    }

    // -- returns a perspective projection matrix
    // -- (things farther away appear smaller)
    // -- all arguments are scalars aka normal numbers
    // -- aspectRatio is defined as window width divided by window height
    def setProjectionMatrix(fov, aspectRatio, near, far) {
        this.matrix = love.chai_matrices.setProjectionMatrix(fov, aspectRatio, near, far)
    }

    // -- returns an orthographic projection matrix
    // -- (things farther away are the same size as things closer)
    // -- all arguments are scalars aka normal numbers
    // -- aspectRatio is defined as window width divided by window height
    def setOrthographicMatrix(left, right, bottom, top, near, far) {
        this.matrix = love.chai_matrices.setOrthographicMatrix(left, right, bottom, top, near, far)
    }

    // -- returns a view matrix
    // -- eye, target, and up are all 3d vectors
    def setViewMatrix(eye, target, up) {
        // love.window.showMessageBox(to_string(eye[0]))
        // love.window.showMessageBox(to_string(eye[1]))
        // love.window.showMessageBox(to_string(eye[2]))
        // love.window.showMessageBox(to_string(target[0]))
        // love.window.showMessageBox(to_string(target[1]))
        // love.window.showMessageBox(to_string(target[2]))
        // love.window.showMessageBox(to_string(up[0]))
        // love.window.showMessageBox(to_string(up[1]))
        // love.window.showMessageBox(to_string(up[2]))

        this.matrix = love.chai_matrices.setViewMatrix(eye, target, up)
    }
}
