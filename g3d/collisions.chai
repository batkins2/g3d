// -- written by groverbuger for g3d
// -- september 2021
// -- MIT license

// auto vectors = require("g3d/vectors.chai")

// ----------------------------------------------------------------------------------------------------
// -- collision detection functions
// ----------------------------------------------------------------------------------------------------
// --
// -- none of these functions are required for developing 3D games
// -- however these collision functions are very frequently used in 3D games
// --
// -- be warned! a lot of this code is butt-ugly
// -- using a table per vector would create a bazillion tables and lots of used memory
// -- so instead all vectors are all represented using three number variables each
// -- this approach }s up making the code look terrible, but collision functions need to be efficient

// ----------------------------------------------------------------------------------------------------
// -- collision functions that apply on lists of vertices
// ----------------------------------------------------------------------------------------------------

class collisions {
    def rayIntersection(verts, transform, src_x, src_y, src_z, dir_x, dir_y, dir_z) {
        return findClosest(transform, verts, triangleRay, src_x, src_y, src_z, dir_x, dir_y, dir_z)
    }

    def isPointInside(verts, transform, x, y, z) {
        return findAny(transform, verts, triangleRay, x, y, z, 0, 0, 1)
    }

    def sphereIntersection(verts, transform, src_x, src_y, src_z, radius) {
        return findClosest(transform, verts, triangleSphere, src_x, src_y, src_z, radius)
    }

    def closestPoint(verts, transform, src_x, src_y, src_z) {
        return findClosest(transform, verts, trianglePoint, src_x, src_y, src_z)
    }

    def capsuleIntersection(verts, transform, tip_x, tip_y, tip_z, base_x, base_y, base_z, radius) {
        // -- the normal vector coming out the tip of the capsule
        auto norm = vectors.normalize(tip_x - base_x, tip_y - base_y, tip_z - base_z)

        // -- the base and tip, inset by the radius
        // -- these two coordinates are the actual extent of the capsule sphere line
        auto a_x = base_x + norm[0]*radius
        auto a_y = base_y + norm[1]*radius
        auto a_z = base_z + norm[2]*radius
        auto b_x = tip_x - norm[0]*radius
        auto b_y = tip_y - norm[1]*radius
        auto b_z = tip_z - norm[2]*radius

        return findClosest(
            transform,
            verts,
            triangleCapsule,
            tip_x, tip_y, tip_z,
            base_x, base_y, base_z,
            a_x, a_y, a_z,
            b_x, b_y, b_z,
            norm_x, norm_y, norm_z,
            radius
        )
    }

    // -- finds the closest point to the source point on the given line segment
    def closestPointOnLineSegment(
            a_x,a_y,a_z, // -- point one of line segment
            b_x,b_y,b_z, // -- point two of line segment
            x,y,z        // -- source point
        ) {
        auto ab_x = b_x - a_x
        auto ab_y = b_y - a_y
        auto ab_z = b_z - a_z
        auto t = vectors.dotProduct(x - a_x, y - a_y, z - a_z, ab_x, ab_y, ab_z) / (ab_x^2 + ab_y^2 + ab_z^2)
        t = math.min(1, math.max(0, t))
        return [a_x + t*ab_x, a_y + t*ab_y, a_z + t*ab_z]
    }

    // -- model - ray intersection
    // -- based off of triangle - ray collision from excessive's CPML library
    // -- does a triangle - ray collision for every face in the model to find the shortest collision
    // --
    // -- sources:
    // --     https://github.com/excessive/cpml/blob/master/modules/intersect.lua
    // --     http://www.lighthouse3d.com/tutorials/maths/ray-triangle-intersection/
    def triangleRay(
            tri_0_x, tri_0_y, tri_0_z,
            tri_1_x, tri_1_y, tri_1_z,
            tri_2_x, tri_2_y, tri_2_z,
            n_x, n_y, n_z,
            src_x, src_y, src_z,
            dir_x, dir_y, dir_z
        ) {
        auto tiny = 2.2204460492503131e-16 // -- the smallest possible value for a double, "double epsilon"

        // -- cache these variables for efficiency
        auto e1 = vectors.subtract(tri_1_x,tri_1_y,tri_1_z, tri_0_x,tri_0_y,tri_0_z)
        auto e2 = vectors.subtract(tri_2_x,tri_2_y,tri_2_z, tri_0_x,tri_0_y,tri_0_z)
        auto h = vectors.crossProduct(dir_x,dir_y,dir_z, e2[0],e2[1],e2[2])
        auto a = vectors.dotProduct(h[0],h[1],h[2], e1[0],e1[1],e1[2])

        // -- if a is too close to 0, ray does not intersect triangle
        if (math.abs(a) <= tiny) {
            return
        }

        auto s = vectors.subtract(src_x,src_y,src_z, tri_0_x,tri_0_y,tri_0_z)
        auto u = vectors.dotProduct(s[0],s[1],s[2], h[0],h[1],h[2]) / a

        // -- ray does not intersect triangle
        if (u < 0 || u > 1) {
            return
        }

        auto q = vectors.crossProduct(s[0],s[1],s[2], e1[0],e1[1],e1[2])
        auto v = vectors.dotProduct(dir_x,dir_y,dir_z, q[0],q[1],q[2]) / a

        // -- ray does not intersect triangle
        if (v < 0 || u + v > 1) {
            return
        }

        // -- at this stage we can compute t to find out where
        // -- the intersection point is on the line
        auto thisLength = vectors.dotProduct(q[0],q[1],q[2], e2[0],e2[1],e2[2]) / a

        // -- if hit this triangle and it's closer than any other hit triangle
        if (thisLength >= tiny && (! finalLength || thisLength < finalLength)) {
            // --auto norm_x, norm_y, norm_z = vectors.crossProduct(e11,e12,e13, e21,e22,e23)

            return [thisLength, src_x + dir_x*thisLength, src_y + dir_y*thisLength, src_z + dir_z*thisLength, n_x,n_y,n_z]
        }
    }

    // -- detects a collision between a triangle and a sphere
    // --
    // -- sources:
    // --     https://wickedengine.net/2020/04/26/capsule-collision-detection/
    def triangleSphere(
            tri_0_x, tri_0_y, tri_0_z,
            tri_1_x, tri_1_y, tri_1_z,
            tri_2_x, tri_2_y, tri_2_z,
            tri_n_x, tri_n_y, tri_n_z,
            src_x, src_y, src_z, radius
        ) {

        // -- recalculate surface normal of this triangle
        auto side1_x = tri_1_x - tri_0_x
        auto side1_y = tri_1_y - tri_0_y
        auto side1_z = tri_1_z - tri_0_z
        auto side2_x = tri_2_x - tri_0_x
        auto side2_y = tri_2_y - tri_0_y
        auto side2_z = tri_2_z - tri_0_z
        auto n = vectors.normalize(vectors.crossProduct(side1_x, side1_y, side1_z, side2_x, side2_y, side2_z))

        // -- distance from src to a vertex on the triangle
        auto dist = vectors.dotProduct(src_x - tri_0_x, src_y - tri_0_y, src_z - tri_0_z, n[0], n[1], n[2])

        // -- collision not possible, just return
        if (dist < -radius || dist > radius) {
            return
        }

        // -- itx stands for intersection
        auto itx_x = src_x - n[0] * dist
        auto itx_y = src_y - n[1] * dist
        auto itx_z = src_z - n[2] * dist

        // -- determine whether itx is inside the triangle
        // -- project it onto the triangle and return if this is the case
        auto c0 = vectors.crossProduct(itx_x - tri_0_x, itx_y - tri_0_y, itx_z - tri_0_z, tri_1_x - tri_0_x, tri_1_y - tri_0_y, tri_1_z - tri_0_z)
        auto c1 = vectors.crossProduct(itx_x - tri_1_x, itx_y - tri_1_y, itx_z - tri_1_z, tri_2_x - tri_1_x, tri_2_y - tri_1_y, tri_2_z - tri_1_z)
        auto c2 = vectors.crossProduct(itx_x - tri_2_x, itx_y - tri_2_y, itx_z - tri_2_z, tri_0_x - tri_2_x, tri_0_y - tri_2_y, tri_0_z - tri_2_z)
        if (vectors.dotProduct(c0[0], c0[1], c0[2], n[0], n[1], n[2]) <= 0 && vectors.dotProduct(c1[0], c1[1], c1[2], n[0], n[1], n[2]) <= 0 && vectors.dotProduct(c2[0], c2[1], c2[2], n[0], n[1], n[2]) <= 0) {
            n_x = src_x - itx_x
            n_y = src_y - itx_y
            n_z = src_z - itx_z

            // -- the sphere is inside the triangle, so the normal is zero
            // -- instead, just return the triangle's normal
            if (n_x == 0 && n_y == 0 && n_z == 0) {
                return [vectors.magnitude(n_x, n_y, n_z), itx_x, itx_y, itx_z, tri_n_x, tri_n_y, tri_n_z]
            }

            return [vectors.magnitude(n_x, n_y, n_z), itx_x, itx_y, itx_z, n_x, n_y, n_z]
        }

        // -- itx is outside triangle
        // -- find points on all three line segments that are closest to itx
        // -- if distance between itx and one of these three closest points is in range, there is an intersection
        auto radiussq = radius * radius
        auto smallestDist

        auto line1 = closestPointOnLineSegment(tri_0_x, tri_0_y, tri_0_z, tri_1_x, tri_1_y, tri_1_z, src_x, src_y, src_z)
        auto dist = (src_x - line1[0])^2 + (src_y - line1[1])^2 + (src_z - line1[2])^2
        if (dist <= radiussq) {
            smallestDist = dist
            itx_x = line1[0]
            itx_y = line1[1]
            itx_z = line1[2]
        }

        auto line2 = closestPointOnLineSegment(tri_1_x, tri_1_y, tri_1_z, tri_2_x, tri_2_y, tri_2_z, src_x, src_y, src_z)
        auto dist = (src_x - line2[0])^2 + (src_y - line2[1])^2 + (src_z - line2[2])^2
        if ((smallestDist && dist < smallestDist || !smallestDist) && dist <= radiussq) {
            smallestDist = dist
            itx_x = line2[0]
            itx_y = line2[1]
            itx_z = line2[2]
        }

        auto line3 = closestPointOnLineSegment(tri_2_x, tri_2_y, tri_2_z, tri_0_x, tri_0_y, tri_0_z, src_x, src_y, src_z)
        auto dist = (src_x - line3[0])^2 + (src_y - line3[1])^2 + (src_z - line3[2])^2
        if ((smallestDist && dist < smallestDist || !smallestDist) && dist <= radiussq) {
            smallestDist = dist
            itx_x = line3[0]
            itx_y = line3[1]
            itx_z = line3[2]
        }

        if (smallestDist) {
            n_x = src_x - itx_x
            n_y = src_y - itx_y
            n_z = src_z - itx_z

            // -- the sphere is inside the triangle, so the normal is zero
            // -- instead, just return the triangle's normal
            if (n_x == 0 && n_y == 0 && n_z == 0) {
                return [vectors.magnitude(n_x, n_y, n_z), itx_x, itx_y, itx_z, tri_n_x, tri_n_y, tri_n_z]
            }

            return [vectors.magnitude(n_x, n_y, n_z), itx_x, itx_y, itx_z, n_x, n_y, n_z]
        }
    }

    // -- finds the closest point on the triangle from the source point given
    // --
    // -- sources:
    // --     https://wickedengine.net/2020/04/26/capsule-collision-detection/
    def trianglePoint(
            tri_0_x, tri_0_y, tri_0_z,
            tri_1_x, tri_1_y, tri_1_z,
            tri_2_x, tri_2_y, tri_2_z,
            tri_n_x, tri_n_y, tri_n_z,
            src_x, src_y, src_z
        ) {

        // -- recalculate surface normal of this triangle
        auto side1_x = tri_1_x - tri_0_x
        auto side1_y = tri_1_y - tri_0_y
        auto side1_z = tri_1_z - tri_0_z
        auto side2_x = tri_2_x - tri_0_x
        auto side2_y = tri_2_y - tri_0_y
        auto side2_z = tri_2_z - tri_0_z
        auto n = vectors.normalize(vectors.crossProduct(side1_x, side1_y, side1_z, side2_x, side2_y, side2_z))

        // -- distance from src to a vertex on the triangle
        auto dist = vectors.dotProduct(src_x - tri_0_x, src_y - tri_0_y, src_z - tri_0_z, n[0], n[1], n[2])

        // -- itx stands for intersection
        auto itx_x = src_x - n[0] * dist
        auto itx_y = src_y - n[1] * dist
        auto itx_z = src_z - n[2] * dist

        // -- determine whether itx is inside the triangle
        // -- project it onto the triangle and return if this is the case
        auto c0 = vectors.crossProduct(itx_x - tri_0_x, itx_y - tri_0_y, itx_z - tri_0_z, tri_1_x - tri_0_x, tri_1_y - tri_0_y, tri_1_z - tri_0_z)
        auto c1 = vectors.crossProduct(itx_x - tri_1_x, itx_y - tri_1_y, itx_z - tri_1_z, tri_2_x - tri_1_x, tri_2_y - tri_1_y, tri_2_z - tri_1_z)
        auto c2 = vectors.crossProduct(itx_x - tri_2_x, itx_y - tri_2_y, itx_z - tri_2_z, tri_0_x - tri_2_x, tri_0_y - tri_2_y, tri_0_z - tri_2_z)
        if  (vectors.dotProduct(c0[0], c0[1], c0[2], n[0], n[1], n[2]) <= 0 && vectors.dotProduct(c1[0], c1[1], c1[2], n[0], n[1], n[2]) <= 0 && vectors.dotProduct(c2[0], c2[1], c2[2], n[0], n[1], n[2]) <= 0) {
            n_x = src_x - itx_x
            n_y = src_y - itx_y
            n_z = src_z - itx_z

            // -- the sphere is inside the triangle, so the normal is zero
            // -- instead, just return the triangle's normal
            if (n_x == 0 && n_y == 0 && n_z == 0) {
                return [vectors.magnitude(n_x, n_y, n_z), itx_x, itx_y, itx_z, tri_n_x, tri_n_y, tri_n_z]
            }

            return [vectors.magnitude(n_x, n_y, n_z), itx_x, itx_y, itx_z, n_x, n_y, n_z]
        }

        // -- itx is outside triangle
        // -- find points on all three line segments that are closest to itx
        // -- if distance between itx and one of these three closest points is in range, there is an intersection
        auto line1 = closestPointOnLineSegment(tri_0_x, tri_0_y, tri_0_z, tri_1_x, tri_1_y, tri_1_z, src_x, src_y, src_z)
        auto dist = (src_x - line1[0])^2 + (src_y - line1[1])^2 + (src_z - line1[2])^2
        auto smallestDist = dist
        itx_x = line1[0]
        itx_y = line1[1]
        itx_z = line1[2]

        auto line2 = closestPointOnLineSegment(tri_1_x, tri_1_y, tri_1_z, tri_2_x, tri_2_y, tri_2_z, src_x, src_y, src_z)
        auto dist = (src_x - line2[0])^2 + (src_y - line2[1])^2 + (src_z - line2[2])^2
        if (smallestDist && dist < smallestDist) {
            smallestDist = dist
            itx_x = line2[0]
            itx_y = line2[1]
            itx_z = line2[2]
        }

        auto line3 = closestPointOnLineSegment(tri_2_x, tri_2_y, tri_2_z, tri_0_x, tri_0_y, tri_0_z, src_x, src_y, src_z)
        auto dist = (src_x - line3[0])^2 + (src_y - line3[1])^2 + (src_z - line3[2])^2
        if (smallestDist && dist < smallestDist) {
            smallestDist = dist
            itx_x = line3[0]
            itx_y = line3[1]
            itx_z = line3[2]
        }

        if (smallestDist) {
            n_x = src_x - itx_x
            n_y = src_y - itx_y
            n_z = src_z - itx_z

            // -- the sphere is inside the triangle, so the normal is zero
            // -- instead, just return the triangle's normal
            if (n_x == 0 && n_y == 0 && n_z == 0) {
                return [vectors.magnitude(n_x, n_y, n_z), itx_x, itx_y, itx_z, tri_n_x, tri_n_y, tri_n_z]
            }

            return [vectors.magnitude(n_x, n_y, n_z), itx_x, itx_y, itx_z, n_x, n_y, n_z]
        }
    }

    // -- finds the collision point between a triangle and a capsule
    // -- capsules are defined with two points and a radius
    // --
    // -- sources:
    // --     https://wickedengine.net/2020/04/26/capsule-collision-detection/
    def triangleCapsule(
            tri_0_x, tri_0_y, tri_0_z,
            tri_1_x, tri_1_y, tri_1_z,
            tri_2_x, tri_2_y, tri_2_z,
            n_x, n_y, n_z,
            tip_x, tip_y, tip_z,
            base_x, base_y, base_z,
            a_x, a_y, a_z,
            b_x, b_y, b_z,
            capn_x, capn_y, capn_z,
            radius
        ) {

        // -- find the normal of this triangle
        // -- tbd if necessary, this sometimes fixes weird edgecases
        auto side1_x = tri_1_x - tri_0_x
        auto side1_y = tri_1_y - tri_0_y
        auto side1_z = tri_1_z - tri_0_z
        auto side2_x = tri_2_x - tri_0_x
        auto side2_y = tri_2_y - tri_0_y
        auto side2_z = tri_2_z - tri_0_z
        auto n = vectors.normalize(vectors.crossProduct(side1_x, side1_y, side1_z, side2_x, side2_y, side2_z))

        auto dotOfNormals = math.abs(vectors.dotProduct(n[0], n[1], n[2], capn_x, capn_y, capn_z))

        // -- default reference point to an arbitrary point on the triangle
        // -- for when dotOfNormals is 0, because { the capsule is parallel to the triangle
        auto ref_x = tri_0_x
        auto ref_y = tri_0_y
        auto ref_z = tri_0_z

        if (dotOfNormals > 0) {
            // -- capsule is not parallel to the triangle's plane
            // -- find where the capsule's normal vector intersects the triangle's plane
            auto t = vectors.dotProduct(n_x, n_y, n_z, (tri_0_x - base_x) / dotOfNormals, (tri_0_y - base_y) / dotOfNormals, (tri_0_z - base_z) / dotOfNormals)
            auto plane_itx_x = base_x + capn_x*t
            auto plane_itx_y = base_y + capn_y*t
            auto plane_itx_z = base_z + capn_z*t

            // -- { clamp that plane intersect point onto the triangle itself
            // -- this is the new reference point

            auto out = trianglePoint(
                tri_0_x, tri_0_y, tri_0_z,
                tri_1_x, tri_1_y, tri_1_z,
                tri_2_x, tri_2_y, tri_2_z,
                n[0], n[1], n[2],
                plane_itx_x, plane_itx_y, plane_itx_z
            )
            ref_x = out[1]
            ref_y = out[2]
            ref_z = out[3]
        }

        // -- find the closest point on the capsule line to the reference point
        auto c = closestPointOnLineSegment(a_x, a_y, a_z, b_x, b_y, b_z, ref_x, ref_y, ref_z)

        // -- do a sphere cast from that closest point to the triangle and return the result
        return triangleSphere(
            tri_0_x, tri_0_y, tri_0_z,
            tri_1_x, tri_1_y, tri_1_z,
            tri_2_x, tri_2_y, tri_2_z,
            n_x, n_y, n_z,
            c_x, c_y, c_z, radius
        )
    }

    // ----------------------------------------------------------------------------------------------------
    // -- function appliers
    // ----------------------------------------------------------------------------------------------------
    // -- these functions apply the collision test functions on the given list of triangles

    // -- runs a given intersection function on all of the triangles made up of a given vert table
    def findClosest(self, verts, func,
            var_a, var_b, var_c,
            var_d, var_e, var_f,
            var_g, var_h, var_i,
            var_j, var_k, var_l,
            var_m, var_n, var_o,
            var_p) {
        // -- declare the variables that will be returned by the function
        auto finalLength
        auto where_x
        auto where_y
        auto where_z
        auto norm_x
        auto norm_y
        auto norm_z

        // -- cache references to this model's properties for efficiency
        auto translation_x = 0
        auto translation_y = 0
        auto translation_z = 0
        auto scale_x = 1
        auto scale_y = 1
        auto scale_z = 1
        if (self) {
            if (self.translation) {
                translation_x = self.translation[0]
                translation_y = self.translation[1]
                translation_z = self.translation[2]
            }
            if (self.scale) {
                scale_x = self.scale[0]
                scale_y = self.scale[1]
                scale_z = self.scale[2]
            }
        }

        for (var v=0; v < verts.size(); v+=3) {
            // -- apply the function given with the arguments given
            // -- also supply the points of the current triangle
            auto n = vectors.normalize(
                verts[v][6]*scale_x,
                verts[v][7]*scale_x,
                verts[v][8]*scale_x
            )

            auto out = func(
                verts[v][1]*scale_x + translation_x,
                verts[v][2]*scale_y + translation_y,
                verts[v][3]*scale_z + translation_z,
                verts[v+1][1]*scale_x + translation_x,
                verts[v+1][2]*scale_y + translation_y,
                verts[v+1][3]*scale_z + translation_z,
                verts[v+2][1]*scale_x + translation_x,
                verts[v+2][2]*scale_y + translation_y,
                verts[v+2][3]*scale_z + translation_z,
                n[0],
                n[1],
                n[2],
                var_a, var_b, var_c,
                var_d, var_e, var_f,
                var_g, var_h, var_i,
                var_j, var_k, var_l,
                var_m, var_n, var_o,
                var_p
            )

            auto length = out[0]
            auto wx = out[1]
            auto wy = out[2]
            auto wz = out[3]
            auto nx = out[4]
            auto ny = out[5]
            auto nz = out[6]

            // -- if something was hit
            // -- and either the finalLength is not yet defined or the new length is closer
            // -- { update the collision information
            if (length && (! finalLength || length < finalLength)) {
                finalLength = length
                where_x = wx
                where_y = wy
                where_z = wz
                norm_x = nx
                norm_y = ny
                norm_z = nz
            }
        }

        // -- normalize the normal vector before it is returned
        if (finalLength) {
            auto norm = vectors.normalize(norm_x, norm_y, norm_z)
            norm_x = norm[0]
            norm_y = norm[1]
            norm_z = norm[2]
        }

        // -- return all the information in a standardized way
        return [finalLength, where_x, where_y, where_z, norm_x, norm_y, norm_z]
    }

    // -- runs a given intersection function on all of the triangles made up of a given vert table
    def findAny(self, verts, func, var_a, var_b, var_c, var_d, var_e, var_f) {
        // -- cache references to this model's properties for efficiency
        auto translation_x = 0
        auto translation_y = 0
        auto translation_z = 0
        auto scale_x = 1
        auto scale_y = 1
        auto scale_z = 1
        if (self) {
            if (self.translation) {
                translation_x = self.translation[0]
                translation_y = self.translation[1]
                translation_z = self.translation[2]
            }
            if (self.scale) {
                scale_x = self.scale[0]
                scale_y = self.scale[1]
                scale_z = self.scale[2]
            }
        }

        for (var v=0; v < verts.size(); v+=3) {
            // -- apply the function given with the arguments given
            // -- also supply the points of the current triangle
            auto n = vectors.normalize(
                verts[v][6]*scale_x,
                verts[v][7]*scale_x,
                verts[v][8]*scale_x
            )

            auto length = func(
                verts[v][1]*scale_x + translation_x,
                verts[v][2]*scale_y + translation_y,
                verts[v][3]*scale_z + translation_z,
                verts[v+1][1]*scale_x + translation_x,
                verts[v+1][2]*scale_y + translation_y,
                verts[v+1][3]*scale_z + translation_z,
                verts[v+2][1]*scale_x + translation_x,
                verts[v+2][2]*scale_y + translation_y,
                verts[v+2][3]*scale_z + translation_z,
                n[0],
                n[1],
                n[2],
                var_a, var_b, var_c, var_d, var_e, var_f
            )

            // -- if something was hit
            // -- and either the finalLength is not yet defined or the new length is closer
            // -- { update the collision information
            if (length) { return true }
        }

        return false
    }
}
