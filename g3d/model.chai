// -- written by groverbuger for g3d
// -- september 2021
// -- MIT license

// auto newMatrix = require(mod_root+"g3d/matrices.chai")
// require("g3d/objloader.chai")
// auto collisions = require("g3d/collisions.chai")
// auto vectors = require("g3d/vectors.chai")
// auto camera = require("g3d/camera.chai")

// ----------------------------------------------------------------------------------------------------
// -- define a model class
// ----------------------------------------------------------------------------------------------------


class model {
    def model() {
        
        // -- define some default properties that every model should inherit
        // -- that being the standard vertexFormat and basic 3D shader
        this.vertexFormat = [
            ["VertexPosition", "float", "3"],
            ["VertexTexCoord", "float", "2"],
            ["VertexNormal", "float", "3"],
            ["VertexWeight", "float", "4"],            
            ["VertexJoint", "float", "4"],
            ["VertexColor", "byte", "4"]
        ]
        this.translation = [0.0f,0.0f,0.0f]
        this.rotation = [0.0f,0.0f,0.0f]
        this.scale = [1.0f,1.0f,1.0f]
        // this.shader = g3d.shader

        // -- makes models use less memory when loaded in ram
        // -- by storing the vertex data in an array of vertix structs instead of lua tables
        // -- requires ffi
        // -- note: throws away the model's verts table
        // auto success, ffi = pcall(require, "ffi")
        // if (success) {
        //     ffi.cdef([[
        //         struct vertex {
        //             float x, y, z;
        //             float u, v;
        //             float nx, ny, nz;
        //             uint8_t r, g, b, a;
        //         }
        //     ]])
        //     this.ffi = ffi
        // }
    }

    // def compress() {
    //     auto data = love.data.newByteData(this.ffi.sizeof("struct vertex") * #this.verts)
    //     auto datapointer = this.ffi.cast("struct vertex *", data:getFFIPointer())

    //     for i, vert in ipairs(this.verts) {
    //         auto dataindex = i - 1
    //         datapointer[dataindex].x  = vert[1]
    //         datapointer[dataindex].y  = vert[2]
    //         datapointer[dataindex].z  = vert[3]
    //         datapointer[dataindex].u  = vert[4] || 0
    //         datapointer[dataindex].v  = vert[5] || 0
    //         datapointer[dataindex].nx = vert[6] || 0
    //         datapointer[dataindex].ny = vert[7] || 0
    //         datapointer[dataindex].nz = vert[8] || 0
    //         datapointer[dataindex].r  = (vert[9] || 1)*255
    //         datapointer[dataindex].g  = (vert[10] || 1)*255
    //         datapointer[dataindex].b  = (vert[11] || 1)*255
    //         datapointer[dataindex].a  = (vert[12] || 1)*255
    //     }

    //     this.mesh.release()
    //     this.mesh = love.chai_gfx.newMesh(this.vertexFormat, #this.verts, "triangles")
    //     this.mesh.setVertices(data)
    //     this.mesh.setTexture(this.texture)
    //     this.verts = nil
    // }

    // -- this returns a new instance of the model class
    // -- a model must be given a .obj file || equivalent lua table, and a texture
    // -- translation, rotation, and scale are all 3d vectors and are all optional
    def newModel(verts, texture, translation, rotation, scale) {
        // -- if verts is a string, use it as a path to a .obj file
        // -- otherwise verts is a table, use it as a model defintion
        // if (type_match(verts, "string")) {
        // love.window.showMessageBox("test")
        // auto obj = objloader(verts, false, false)
        //   love.window.showMessageBox("test")
        // this.verts = obj.result
        //   love.window.showMessageBox("test")
        // } else {
        //     this.verts = verts
        // }

        // -- if texture is a string, use it as a path to an image file
        // -- otherwise texture is already an image, so don't bother
        // if (type_match(texture, "string")) {
        this.texture = texture
        //   love.window.showMessageBox("test")
        // } else {
        //     auto workingTexture = texture
        // }

        // -- initialize my variables
        this.mesh = love.chai_mesh.newMesh()
        this.mesh.loadMeshFromFile(this.vertexFormat, verts, "triangles")
        //   love.window.showMessageBox("test")
        if (this.texture != "") {
            this.mesh.setTexture(this.texture)
        }
        //   love.window.showMessageBox("test")
        require(mod_root+"g3d/matrices.chai")
        this.matrix = matrix()
        //   love.window.showMessageBox("test")
        // if (type_match(scale, 1.0) || type_match(scale, 1)) { this.scale = [scale, scale, scale] }
        // else { this.scale = scale }
        // this.scale = scale
        //   love.window.showMessageBox("test")
        this.setTransform(translation, rotation, scale)
        //   love.window.showMessageBox("test")
        // this.draw()
    }

    def initCamera() {
        auto cameraParams = this.mesh.getCameraParams()
        g3d.camera.setParams(cameraParams)        
    }

    def getCamera() {
        auto cameraParams = this.mesh.getCameraParams()
        return cameraParams
    }

    def setCamera(x, y, z) {
        auto cameraParams = this.mesh.getCameraParams()
        cameraParams["position"][0] = x
        if (type_match(y, "float")) {
            cameraParams["position"][1] = y
        }
        if (type_match(z, "float")) {
            cameraParams["position"][2] = z
        }
        cameraParams["target"][0] = x
        if (type_match(y, "float")) {
            cameraParams["target"][1] = y
        }
        if (type_match(z, "float")) {
            cameraParams["target"][2] = z
        }
        g3d.camera.setParams(cameraParams)        
    }

    def setLighting(x, y, z) {
        auto lightParams = this.mesh.getLightParams()
        lightParams["position"][0] = x
        if (type_match(y, "float")) {
            lightParams["position"][1] = y
        }
        if (type_match(y, "float")) {
            lightParams["position"][2] = z
        }
        this.mesh.setLightParams(lightParams)
        // g3d.lighting.setParams(lightParams)  
    }

    // -- populate model's normals in model's mesh automatically
    // -- if true is passed in, the normals are all flipped
    def makeNormals(isFlipped) {
        for (var i=1; i < this.verts; i+=3) {
            if (isFlipped) {
                auto tempVerts = this.verts
                this.verts[i+1] = this.tempVerts[i+2]
                this.verts[i+2] = this.tempVerts[i+1]
            }

            auto vp = this.verts[i]
            auto v = this.verts[i+1]
            auto vn = this.verts[i+2]

            auto n = g3d.vectors.normalize(g3d.vectors.crossProduct(v[1]-vp[1], v[2]-vp[2], v[3]-vp[3], vn[1]-v[1], vn[2]-v[2], vn[3]-v[3]))
            vp[6] = n[0]
            v[6] = n[0]
            vn[6] = n[0]
            vp[7] = n[1]
            v[7] = n[1]
            vn[7] = n[1]
            vp[8] = n[2]
            v[8] = n[2]
            vn[8] = n[2]
        }

        this.mesh = love.chai_mesh.newMesh(this.vertexFormat, this.verts, "triangles")
        this.mesh.setTexture(this.texture)
    }

    // -- move and rotate given two 3d vectors
    def setTransform(translation, rotation, scale) {
        if (this.hasTransformed(translation, rotation, scale)) {
           if (type_match(translation, true)) {
                this.translation = [0.0f,0.0f,0.0f]
            } else {
                this.translation = translation
            }
            this.rotation = rotation
            this.scale = scale
            // love.window.showMessageBox("test2")
            this.updateMatrix()
        }
    }

    def hasTransformed(translation, rotation, scale) {
        return this.translation[0] != translation[0] || this.translation[1] != translation[1] || this.translation[2] != translation[2] || this.rotation[0] != rotation[0] || this.rotation[1] != rotation[1] || this.rotation[2] != rotation[2] || this.scale[0] != scale[0] || this.scale[1] != scale[1] || this.scale[2] != scale[2]
    }

    // -- move given one 3d vector
    def setTranslation(tx,ty,tz) {
        this.translation[0] = tx
        this.translation[1] = ty
        this.translation[2] = tz
        this.updateMatrix()
    }

    // -- rotate given one 3d vector
    // -- using euler angles
    def setRotation(rx,ry,rz) {
        this.rotation[0] = rx
        this.rotation[1] = ry
        this.rotation[2] = rz
        this.updateMatrix()
    }

    // -- create a quaternion from an axis and an angle
    def setAxisAngleRotation(x,y,z,angle) {
        vec = g3d.vectors.normalize(x,y,z)
        angle = angle / 2

        this.rotation[0] = vec[0] * sin(angle * 1.0f)
        this.rotation[1] = vec[1] * sin(angle * 1.0f)
        this.rotation[2] = vec[2] * sin(angle * 1.0f)
        this.rotation[3] = cos(angle * 1.0)

        this.updateMatrix()
    }

    // -- rotate given one quaternion
    def setQuaternionRotation(x,y,z,w) {
        this.rotation[0] = x
        this.rotation[1] = y
        this.rotation[2] = z
        this.rotation[3] = w
        this.updateMatrix()
    }

    // -- resize model's matrix based on a given 3d vector
    def setScale(sx,sy,sz) {
        this.scale[0] = sx
        this.scale[1] = sy || sx
        this.scale[2] = sz || sx
        this.updateMatrix()
    }

    // -- update the model's transformation matrix
    def updateMatrix() {
        this.matrix.setTransformationMatrix(this.translation, this.rotation, this.scale)
        // this.translation = [0.0f,0.0f,0.0f]
        // this.rotation = [0.0f,0.0f,0.0f]
        // this.scale = [1.0f,1.0f,1.0f]
    }

    def playAnimation(name, loop) {
        this.mesh.playAnimation(name, loop)
    }

    def endAnimation(name) {
        this.mesh.endAnimation(name)
    }

    // -- draw the model
    def draw() {
        // [1.0, 0.0, 0.0, 0.0,
        //  0.0, 1.0, 0.0, 0.0,
        //  0.0, 0.0, 1.0, 0.0, 
        //  4.0, 0.0, 0.0, 1.0]
        // [0.0, 0.0, -1.0, 0.0,
        //  -1.0, 1.0, 0.0, 0.0, 
        //  0.0, 1.0, 0.0, 0.0, 
        //  0.0, 0.0, 0.0, 1.0]
        //  [0.75, 0.0, 0.0, 0.0,
        //   0.0, 1.0, 0.0, 0.0, 
        //   0.0, 0.0, -1.0, -1.0, 
        //   0.0, 0.0, -0.02, 0.0]
        // auto shader = shader || this.shader
        // love.chai_gfx.setShader(g3d.shader)
        // g3d.shader.send("modelMatrix", this.matrix.matrix)
//         g3d.shader.send("modelMatrix", [
//     -100.0, 0.0, 0.0, 0.0,
//     0.0, -100.0, 0.0, 0.0,
//     0.0, 0.0, -100.0, -40.0,
//     0.0, 0.0, 0.0, 1.0
// ])
        g3d.shader.send("viewMatrix", g3d.camera.viewMatrix.matrix)
        // g3d.shader.send("viewMatrix", [1.0, 0.0, 0.0, 0.0,
        //   0.0, 1.0, 0.0, 0.0,
        //   0.0, 0.0, 1.0, 0.0,
        //   0.0, 0.0, 0.0, 1.0])
        // g3d.shader.send("projectionMatrix", g3d.camera.projectionMatrix.matrix)
    //     g3d.shader.send("projectionMatrix", [0.75, 0.0, 0.0, 0.0,
    // 0.0, 1.0, 0.0, 0.0,
    // 0.0, 0.0, -1.002, -0.2002,
    // 0.0, 0.0, -1.0, 0.0])
        // if (g3d.shader.hasUniform("isCanvasEnabled")) {
        //     g3d.shader.send("isCanvasEnabled", love.chai_gfx.getCanvas() != nil)
        // }
        love.chai_gfx.draw(this.mesh)
        // love.chai_gfx.setShader()
    }

    // -- the fallback def if ffi was not loaded
    def compress() {
        print("[g3d warning] Compression requires FFI!\n" + debug.traceback())
    }

    def rayIntersection(src_x, src_y, src_z, dir_x, dir_y, dir_z) {
        return g3d.collisions.rayIntersection(this.verts, this, src_x, src_y, src_z, dir_x, dir_y, dir_z)
    }

    def isPointInside(x, y, z) {
        return g3d.collisions.isPointInside(this.verts, this, x, y, z)
    }

    def sphereIntersection(src_x, src_y, src_z, radius) {
        return g3d.collisions.sphereIntersection(this.verts, this, src_x, src_y, src_z, radius)
    }

    def closestPoint(src_x, src_y, src_z) {
        return g3d.collisions.closestPoint(this.verts, this, src_x, src_y, src_z)
    }

    def capsuleIntersection(tip_x, tip_y, tip_z, base_x, base_y, base_z, radius) {
        return g3d.collisions.capsuleIntersection(this.verts, this, tip_x, tip_y, tip_z, base_x, base_y, base_z, radius)
    }

    def reloadMesh() {
        this.mesh.reloadMesh()
    }

    def destroy() {
        this.mesh.destroy()
    }
}
