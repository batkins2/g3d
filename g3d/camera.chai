//-- written by groverbuger for g3d
//-- september 2021
//-- MIT license

// auto newMatrix = require("g3d/matrices.chai")
// auto g3d = g3d //-- save a reference to g3d in case the user makes it non-global

// ----------------------------------------------------------------------------------------------------
//-- define the camera singleton
// ----------------------------------------------------------------------------------------------------

//-- private variables used only for the first person camera functions
auto fpsController = [
    "direction": 0,
    "pitch": 0
]

class camera {
    def camera() {
        this.pi = 3.14159265358979323846
        this.fov = this.pi/2
        this.nearClip = 0.01
        this.farClip = 1000
        this.aspectRatio = love.graphics.getWidth()/love.graphics.getHeight()
        this.position = [0,0,0]
        this.target = [1,0,0]
        this.up = [0,0,1]

        this.viewMatrix = matrix()
        this.projectionMatrix = matrix()
    }
    //-- read-only variables, can't be set by the } user
    def getDirectionPitch() {
        return [fpsController.direction, fpsController.pitch]
    }

    //-- convenient def to return the camera's normalized look vector
    def getLookVector() {
        auto vx = this.target[0] - this.position[0]
        auto vy = this.target[1] - this.position[1]
        auto vz = this.target[2] - this.position[2]
        auto length = sqrt(pow(vx*1.0,2.0) + pow(vy*1.0,2.0) + pow(vz*1.0,2.0) * 1.0)

        //-- make sure not to divide by 0
        if (length > 0) {
            return [vx/length, vy/length, vz/length]
        }
        return [vx,vy,vz]
    }

    //-- give the camera a point to look from and a point to look towards
    def lookAt(x,y,z, xAt,yAt,zAt) {
        this.position[0] = x
        this.position[1] = y
        this.position[2] = z
        this.target[0] = xAt
        this.target[1] = yAt
        this.target[2] = zAt

        //-- update the fpsController's direction and pitch based on lookAt
        auto d = this.getLookVector()
        fpsController.direction = this.pi/2 - atan2(d[2], d[0])
        fpsController.pitch = atan2(d[1], sqrt(pow(d[0]*1.0,2.0) + pow(d[2]*1.0,2.0) * 1.0))

        //-- update the camera in the shader
        this.updateViewMatrix()
    }

    //-- move and rotate the camera, given a point and a direction and a pitch (vertical direction) {
    def lookInDirection(x,y,z, directionTowards,pitchTowards) {
        this.position[0] = x || this.position[0]
        this.position[1] = y || this.position[1]
        this.position[2] = z || this.position[2]

        fpsController.direction = directionTowards || fpsController.direction
        fpsController.pitch = pitchTowards || fpsController.pitch

        //-- turn the cos of the pitch into a sign value, either 1, -1, || 0
        auto sign = cos(fpsController.pitch*1.0)
        sign = (sign > 0 && 1) || (sign < 0 && -1) || 0

        //-- don't let cosPitch ever hit 0, because weird camera glitches will happen
        auto cosPitch = sign*max(abs(cos(fpsController.pitch*1.0)), 0.00001)

        //-- convert the direction and pitch into a target point
        this.target[0] = this.position[0]+cos(fpsController.direction*1.0)*cosPitch
        this.target[1] = this.position[1]+sin(fpsController.direction*1.0)*cosPitch
        this.target[2] = this.position[2]+sin(fpsController.pitch*1.0)

        //-- update the camera in the shader
        this.updateViewMatrix()
    }

    //-- recreate the camera's view matrix from its current values
    def updateViewMatrix(vectors) {
        this.viewMatrix.setViewMatrix(this.position, this.target, this.up, vectors)
    }

    //-- recreate the camera's projection matrix from its current values
    def updateProjectionMatrix() {
        this.projectionMatrix.setProjectionMatrix(this.fov, this.nearClip, this.farClip, this.aspectRatio)
    }

    //-- recreate the camera's orthographic projection matrix from its current values
    def updateOrthographicMatrix(size) {
        this.projectionMatrix.setOrthographicMatrix(this.fov, size || 5, this.nearClip, this.farClip, this.aspectRatio)
    }

    //-- simple first person camera movement with WASD
    //-- put this auto def in your love.update to use, passing in dt
    def firstPersonMovement(dt) {
        //-- collect inputs
        auto moveX = 0
        auto moveY = 0
        auto cameraMoved = false
        auto speed = 9
        if (love.keyboard.isDown == "w") { moveX = moveX + 1 }
        if (love.keyboard.isDown == "a") { moveY = moveY + 1 }
        if (love.keyboard.isDown == "s") { moveX = moveX - 1 }
        if (love.keyboard.isDown == "d") { moveY = moveY - 1 }
        if (love.keyboard.isDown == "space") {
            this.position[2] = this.position[2] + speed*dt
            cameraMoved = true
        }
        if (love.keyboard.isDown == "lshift") {
            this.position[2] = this.position[2] - speed*dt
            cameraMoved = true
        }

        //-- do some trigonometry on the inputs to make movement relative to camera's direction
        //-- also to make the player not move faster in diagonal directions
        if (moveX != 0 || moveY != 0) {
            auto angle = atan2(moveY, moveX)
            this.position[0] = this.position[0] + cos(fpsController.direction + angle * 1.0) * speed * dt
            this.position[1] = this.position[1] + sin(fpsController.direction + angle * 1.0) * speed * dt
            cameraMoved = true
        }

        //-- update the camera's in the shader
        //-- only if the camera moved, for a slight performance benefit
        if (cameraMoved) {
            this.lookInDirection()
        }
    }

    //-- use this in your love.mousemoved function, passing in the movements
    def firstPersonLook(dx,dy) {
        //-- capture the mouse
        love.mouse.setRelativeMode(true)

        auto sensitivity = 1/300
        fpsController.direction = fpsController.direction - dx*sensitivity
        fpsController.pitch = max(min(fpsController.pitch - dy*sensitivity, this.pi*0.5), this.pi*-0.5)

        this.lookInDirection(this.position[0],this.position[1],this.position[2], fpsController.direction,fpsController.pitch)
    }
}
