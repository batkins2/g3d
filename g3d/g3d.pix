uniform sampler2D shadowMap;
uniform int shadow;

uniform int isSpecular;
uniform sampler2D specularMap;

varying vec3 lighting;
varying vec4 fragPosLightSpace;
varying vec2 vTexCoord;

float grid(vec2 vBC, float width) {
    vec3 bary = vec3(vBC.x, vBC.y, 1.0 - vBC.x - vBC.y);
    vec3 d = fwidth(bary);
    vec3 a3 = smoothstep(d * (width - 0.5), d * (width + 0.5), bary);
    return min(min(a3.x, a3.y), a3.z);
}

float ShadowCalculation() {
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    float closestDepth = texture2D(shadowMap, projCoords.xy).r;
    float currentDepth = projCoords.z;
    float shadow = currentDepth > closestDepth ? 0.5 : 0.0;
    return shadow;
}

vec4 effect(vec4 color, Image texture, vec2 texture_coords, vec2 screen_coords) { 
    
    vec4 pixel = Texel(texture, texture_coords);

    if (isSpecular == 1) {
        vec3 specularColor = texture2D(specularMap, vec2(vTexCoord.x, 1.0 - vTexCoord.y)).rgb;

        vec3 viewDir = normalize(vec3(0.0, 0.0, 1.0));
        vec3 normal = vec3(0.0, 0.0, 1.0);
        vec3 lightDir = normalize(vec3(0.0, 0.0, 1.0));
        vec3 reflectDir = reflect(-lightDir, normal);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 16.0);

        vec3 specular = specularColor * spec;
    

        float shadows = 0.0;
        if (shadow == 1) {
            shadows = ShadowCalculation();
        } 
        vec3 baseColor = (1.0 - shadows) * (pixel.rgb * lighting * 0.5);
    
        vec3 specularMasked = specular;
        vec3 blendedColor = mix(baseColor, baseColor + specularMasked * 0.75, 0.5);
    
        return vec4(blendedColor, pixel.a) * color.a;
    } else {
        float shadows = 0.0;
        if (shadow == 1) {
            shadows = ShadowCalculation();
        } 
        vec3 baseColor = (1.0 - shadows) * (pixel.rgb * lighting);
        return vec4(baseColor, pixel.a) * color.a;
    }    
}