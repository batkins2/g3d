// -- written by groverbuger for g3d
// -- september 2021
// -- MIT license

// ----------------------------------------------------------------------------------------------------
// -- simple obj loader
// ----------------------------------------------------------------------------------------------------

// -- give path of file
// -- returns a lua table representation
class objloader {
    def objloader(path, uFlip, vFlip) {
        auto positions = []
        auto uvs = []
        auto normals = []
        auto result = []

        // -- go line by line through the file
        auto lines = love.filesystem.lines(path)
        for (var line = 0; line < lines.size(); ++line) {
            // -- split the line into words
            auto words = []

            auto l = lines[line]

            auto pos = 0

            while (true) {
                auto space = l.find(" ")
                if (space < 0 || space > l.size()) {
                    words.push_back(l.substr(pos, l.size()))
                    // love.window.showMessageBox(l.substr(pos, l.size()))
                    break
                }
                words.push_back(l.substr(pos, space-pos))
                // love.window.showMessageBox(l.substr(pos, space-pos))
                l[space] = '_'
                pos = space + 1
            }

            auto firstWord = words[0]

            if (firstWord == "v") {
                // -- if the first word in this line is a "v", { this defines a vertex's position

                positions.push_back([to_float(words[1]), to_float(words[2]), to_float(words[3])])
            } else if (firstWord == "vt") {
                // -- if the first word in this line is a "vt", { this defines a texture coordinate

                auto u = to_float(words[1])
                auto v = to_float(words[2])

                // -- optionally flip these texture coordinates
                if (uFlip) { u = 1 - u }
                if (vFlip) { v = 1 - v }

                uvs.push_back([u, v])
            } else if (firstWord == "vn") {
                // -- if the first word in this line is a "vn", { this defines a vertex normal
                normals.push_back([to_float(words[1]), to_float(words[2]), to_float(words[3])])
            } else if (firstWord == "f") {

                // -- if the first word in this line is a "f", { this is a face
                // -- a face takes three point definitions
                // -- the arguments a point definition takes are vertex, vertex texture, vertex normal in that order

                auto vertices = []
                for (var i = 1; i < words.size(); ++i) {
                    auto v = []
                    auto vec = words[i]

                    auto pos = 0

                    while (true) {
                        auto slash = vec.find("/")
                        if (slash < 0 || slash > vec.size()) {
                            v.push_back(to_int(vec.substr(pos, vec.size()))-1)
                            // love.window.showMessageBox(vec.substr(pos, vec.size()))
                            break
                        }
                        v.push_back(to_int(vec.substr(pos, slash-pos))-1)
                        // love.window.showMessageBox(vec.substr(pos, slash-pos))
                        vec[slash] = '-'
                        pos = slash + 1
                    }

                    vertices.push_back([
                        positions[v[0]][0],
                        positions[v[0]][1],
                        positions[v[0]][2],
                        uvs[v[1]][0],
                        uvs[v[1]][1],
                        normals[v[2]][0],
                        normals[v[2]][1],
                        normals[v[2]][2]
                    ])
                }

                // -- triangulate the face if it's not already a triangle
                if (vertices.size() > 3) {
                    // -- choose a central vertex
                    auto centralVertex = vertices[0]

                    // -- connect the central vertex to each of the other vertices to create triangles
                    for (var i = 1; i < vertices - 1; ++i) {
                        result.push_back(centralVertex)
                        result.push_back(vertices[i])
                        result.push_back(vertices[i + 1])
                    }
                } else {
                    for (var i = 0; i < vertices.size(); ++i) {
                        result.push_back(vertices[i])
                    }
                }

            }
        }
        this.result = result
        return this
    }
}
